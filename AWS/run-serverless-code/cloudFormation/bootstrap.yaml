AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Sets up S3 for Terraform state, a DynamoDB table for locks,
  a CodePipeline connected to a GitHub repository, and a CodeBuild project to run Terraform commands.

Parameters:
  projectName:
    Type: String
    Description: Name of the current tutorial
    Default: "run-serverless-code"
  # GitHubOwner:
  #   Type: String
  #   Description: GitHub repository owner
  # GitHubRepo:
  #   Type: String
  #   Description: GitHub repository name
  # GitHubBranch:
  #   Type: String
  #   Description: GitHub branch to track
  #   Default: "main"

Resources:
  TerraformStateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "terraform-state-${projectName}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  TerraformLockTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "terraform-locks"
      AttributeDefinitions:
        - AttributeName: LockID
          AttributeType: S
      KeySchema:
        - AttributeName: LockID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${projectName}-CodeBuildServiceRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
      Policies:
        - PolicyName: CodeBuildSecretManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${projectName}-CodePipelineServiceRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
      Policies:
        - PolicyName: CodePipelineIAMPassPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt CodeBuildServiceRole.Arn
        - PolicyName: CodePipelineCodeConnectionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codestar-connections:GetConnectionToken
                  - codestar-connections:GetConnection
                  - codeconnections:GetConnectionToken
                  - codeconnections:GetConnection
                  - codeconnections:UseConnection
                Resource: "*"

  # TerraformCodeBuildProject:
  #   Type: AWS::CodeBuild::Project
  #   Properties:
  #     Name: !Sub "${projectName}-TerraformBuild"
  #     ServiceRole: !GetAtt CodeBuildServiceRole.Arn
  #     Artifacts:
  #       Type: CODEPIPELINE
  #     Environment:
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       Image: aws/codebuild/standard:5.0
  #       Type: LINUX_CONTAINER
  #       EnvironmentVariables:
  #         - Name: TF_VAR_state_bucket
  #           Value: !Ref TerraformStateBucket
  #         - Name: TF_VAR_lock_table
  #           Value: !Ref TerraformLockTable
  #     Source:
  #       Type: CODEPIPELINE
  #     TimeoutInMinutes: 60
  #     Description: "Build project to run Terraform commands"
  #     BuildSpec: |
  #       version: 0.2
  #       phases:
  #         install:
  #           commands:
  #             - echo "Installing Terraform..."
  #             # Install Terraform if not already present in the environment
  #             - wget https://releases.hashicorp.com/terraform/1.0.0/terraform_1.0.0_linux_amd64.zip
  #             - unzip terraform_1.0.0_linux_amd64.zip
  #             - mv terraform /usr/local/bin/
  #         pre_build:
  #           commands:
  #             - echo "Initializing Terraform..."
  #             - terraform init -backend-config="bucket=$TF_VAR_state_bucket" -backend-config="dynamodb_table=$TF_VAR_lock_table"
  #         build:
  #           commands:
  #             - echo "Planning Terraform changes..."
  #             - terraform plan -out=tfplan
  #             - echo "Applying Terraform changes..."
  #             - terraform apply -auto-approve tfplan
  #       artifacts:
  #         files: "**/*"

  # TerraformCodePipeline:
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     Name: !Sub "${projectName}-Pipeline"
  #     RoleArn: !GetAtt CodePipelineServiceRole.Arn
  #     ArtifactStore:
  #       Type: S3
  #       Location: !Ref TerraformStateBucket
  #     Stages:
  #       - Name: Source
  #         Actions:
  #           - Name: SourceAction
  #             ActionTypeId:
  #               Category: Source
  #               Owner: AWS
  #               Provider: CodeStarSourceConnection
  #               Version: '1'
  #             OutputArtifacts:
  #               - Name: SourceOutput
  #             Configuration:
  #               ConnectionArn: "arn:aws:codeconnections:us-east-1:548572037680:connection/40bb54a9-b3f1-40ad-909f-438b9904f449"
  #               FullRepositoryId: !Sub "${GitHubOwner}/${GitHubRepo}"
  #               BranchName: !Ref GitHubBranch
  #       - Name: Build
  #         Actions:
  #           - Name: BuildAction
  #             ActionTypeId:
  #               Category: Build
  #               Owner: AWS
  #               Provider: CodeBuild
  #               Version: '1'
  #             InputArtifacts:
  #               - Name: SourceOutput
  #             Configuration:
  #               ProjectName: !Ref TerraformCodeBuildProject
  #             RunOrder: 1

Outputs:
  TerraformStateBucketName:
    Description: "The S3 bucket for Terraform state"
    Value: !Ref TerraformStateBucket

  DynamoDBLockTableName:
    Description: "The DynamoDB table for Terraform state locking"
    Value: !Ref TerraformLockTable

  # CodePipelineName:
  #   Description: "Name of the created CodePipeline"
  #   Value: !Ref TerraformCodePipeline
